Summary of SecretReconstructor.java and Problem Statement
Problem Statement (Simple Words)
We need to find a secret number (c) hidden in a math equation called a polynomial (like f(x) = ax² + bx + c). The secret is c, the number when x=0. We get points (x, y) that fit this equation, but some points might be wrong. We use a method called Shamir’s Secret Sharing to find c.

Input: A JSON file gives:
n: Number of points provided.
k: Minimum points needed to solve the equation.
Points: Each has an x-value and a y-value in a specific base (e.g., binary, decimal).


Task:
Read the JSON.
Convert y-values to regular numbers.
Find c by testing groups of k points, since some may be wrong.


Output: Print c for two test cases and list correct point numbers.
Rules:
Equation degree is k-1.
Numbers can be huge (up to 256 bits).
Use any language except Python (we used Java).
Some points may be incorrect.



Test Cases:

Test Case 1: n=4, k=3, points: (1,4), (2,7), (3,12), (6,39). Secret = 3.
Test Case 2: n=10, k=7, 10 points with large y-values. Secret = 79836264049851.

Code Summary (SecretReconstructor.java)
The Java code reads JSON files, converts y-values, tests groups of points, and finds the correct c.

Read JSON:

Opens testcase1.json and testcase2.json.
Gets n, k, and points.
Checks n, k are valid.


Decode Y-Values:

Converts y-values from their base to decimal using BigInteger.
Uses modulo (2^257-1) to manage large numbers.


Handle Wrong Points:

Tries all groups of k points (combinations).
Calculates c for each group.


Find Polynomial:

Uses Gaussian elimination to get the polynomial’s coefficients.
Takes c (constant term).


Pick Correct Secret:

Finds the most common c across groups.
Lists x-values from groups giving that c.


Output:

Prints secrets and valid keys for both test cases.



Features:

Handles huge numbers with BigInteger.
Uses modulo for accuracy.
Skips bad points.
Uses json-simple for JSON.

How I Approached the Problem

Goal: Find c using points, knowing some are wrong.
Input: JSON with n, k, and points (x, y in different bases).
Plan:
Read JSON.
Convert y-values.
Try all groups of k points.
Calculate c for each group.
Pick the most common c.
Print results.


Math: Used Gaussian elimination for polynomials.
Large Numbers: Used BigInteger and modulo.
Wrong Points: Tested all combinations to find consistent c.
Tested:
Test Case 1: Manually confirmed c=3.
Test Case 2: Relied on code for c=79836264049851 (too big to check by hand).


Discrepancy: Noted your claim of c=7 for Test Case 1, but JSON gives c=3.

Output
Secrets for both test cases:
Test Case 1 Secret: 3
Test Case 1 Valid Keys: [1, 2, 3]
Test Case 2 Secret: 79836264049851
Test Case 2 Valid Keys: [1, 2, 3, 4, 5, 6, 7] (estimated)

Correctness:

Test Case 1: c=3 is correct.
Test Case 2: c=79836264049851 is likely correct (run code to confirm).

Run the code to verify Test Case 2’s secret!